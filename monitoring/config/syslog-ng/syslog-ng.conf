#############################################################################
# Default syslog-ng.conf file which collects all local logs into a
# single file called /var/log/messages tailored to container usage.
#
# The changes from the stock, default syslog-ng.conf file is that we've
# dropped the system() source that is not needed and that we enabled network
# connections using default-network-drivers(). Customize as needed and
# override using the -v option to docker, such as:
#
#  docker run ...  -v "$PWD/syslog-ng.conf":/etc/syslog-ng/syslog-ng.conf
#

@version: 3.29
@include "scl.conf"

# NOTE: Environment variables are automatically imported from the host

# Collect logs from syslog-ng service itself
source s_local {
	internal();
};

# See: https://syslog-ng.github.io/admin-guide/060_Sources/000_Default-network-drivers/README
# TL;DR, sets up listens on the following ports:
# - BSD Syslog (Legacy/Obsolete): 514/udp, 514/tcp
# - IETF Syslog (New/Preferred): 601/tcp, 6514/tcp
# TODO: For TLS Support, you need to configure the certificate, which I'm too lazy to do atm.
source s_network {
	default-network-drivers();
};

# Filter for syslog traffic coming from MikroTik(s)
filter f_mikrotik {
	netmask("$(getenv MIKROTIK_SYSLOG_IP)/32");
};

# Filter for all other syslog network traffic (inverse of above)
filter f_other {
	not netmask("$(getenv MIKROTIK_SYSLOG_IP)/32");
};

# Append some special sauce to debug source ip
template t_loki_message {
	template("<${PRI}>1 ${ISODATE} ${HOST} ${PROGRAM} ${PID} ${MSGID} [meta source_ip=\"${SOURCEIP}\"] ${MSG}\n");
};

# Where to send MikroTik syslogs
destination d_loki_mikrotik {
	syslog("localhost" transport("tcp") port("1514") template(t_loki_message));
};

# Where to send all other syslogs
destination d_loki_other {
	syslog("localhost" transport("tcp") port("2514") template(t_loki_message));
};

log {
	source(s_network);
	filter(f_mikrotik);
	destination(d_loki_mikrotik);
};

log {
	source(s_local);
	source(s_network);
	filter(f_other);
	destination(d_loki_other);
};
